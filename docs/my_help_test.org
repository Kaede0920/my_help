#+STARTUP: indent nolineimages
#+OPTIONS: ^:{}
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
* head
- my_help_test
* license
-      cc by Haya Ohtera, 2021
* my_help.rb:thor
#+name: ../lib/my_help_list.rb
#+include: ../lib/my_help_list.rb src ruby -n -i

MyHelpに記述されているlistはThorでの動作を記述している．
# my_help.rbのdef listの中身説明
fileとitemにmy_help起動時の引数(args)が入っている．
#  - my_help list (file) (item)
L:8で，もしfileがnilだった場合
:     my_help list (nil) (nil)
を意味しており，そのときには，
: Control.new.list_all
がよばれる．my_helpでの出力ではさらにcolorizeのblueが
付加されているが，テストではcolorコードが邪魔なので，
それをつけずに出力すると
#+begin_src shell
     (出力結果)
     List all helps
      ruby: - ruby
       org: - emacs org-modeのhelp
      todo: - my todo
my_help_test: - my_help_test
     emacs: - Emacs key bind
  new_help: - ヘルプのサンプル雛形
#+end_src
が私の環境では返ってくる．


   - 2:もしitemがnilだった場合
     my_help list ((例)ruby) (nil)
     (出力結果)
     - ruby
     , head           : head
     , license        : license
   -p, puts_%         : puts_%


     (例)の所は6通りのうちどれか一つだけを入力すれば動く
     (注意)この時1のassert_equal expected, Control.new.list_all
           をそのまま用いてしまった為，testが通らなかった
     (改善)assert_equal expected, Control.new.list_help('ruby')
           my_help.rbのelseifのbegin putsを見るとlist_allではなく
           list_help(file)であった
           この時のfileは(例)で使われているruby
           fileは文字列である為rubyを'ruby'としなければならない
* my_help_test
#+name: ../test/my_help_test.rb
#+include: ../test/my_help_test.rb src ruby -n -i
* my_helpの使い方
#+begin_src bash
- my_help
 - my_helpの機能を表示
Commands:
  my_help delete HELP             # delete HELP
  my_help edit HELP               # edit HELP
  my_help git [push|pull]         # git push or pull
  my_help help [COMMAND]          # Describe available comman...
  my_help list [HELP] [ITEM]      # list all helps, specific ...
  my_help new HELP                # make new HELP
  my_help set_editor EDITOR_NAME  # set editor to EDITOR_NAME
  my_help setup                   # set up the test database
  my_help version                 # show version

- my_help list
 - 結果
   List all helps
      ruby: - ruby
       org: - emacs org-modeのhelp
      todo: - my todo
my_help_test: - my_help_test
     emacs: - Emacs key bind
  new_help: - ヘルプのサンプル雛形
  - 振る舞い
   - my_helpで使えるhelpのリスト

- my_help edit [(例)org]
 - org:orgに書き込める
 - my_help_test:my_help_testに書き込める

- my_help list org
 - orgの中に書かれてあるものを表示

- my_help list org -k
 - key_bindの中身だけを表示
#+end_src
* git pull vs git merge
https://qiita.com/wann/items/688bc17460a457104d7d

pull=fetch+merge

git pull:リモートの『master』ブランチ→（ローカルの『origin/master』ブランチ→）ローカルの『master』ブランチ
git merge:ローカルの『origin/master』ブランチ→ローカルの『master』ブランチ
* init
- forkして自分の所へ持ってくる．Github
- Gitの仕組み:縦につながりと横のつながりの2種類から構成されている
 - 縦のつながり編
  - リモートリポジトリ(リポジトリ:ファイルやデータの貯蔵庫)
   - 複数人で共有するためのリポジトリ.
   - 通常Githubなどのサイトに配置する.
   - リモートリポジトリはローカルリポジトリと繋がっており,そこから変更情報のやりとりをする.
  - ローカルリポジトリ
   - 個人で利用するためのリポジトリ.
   - 手元のマシンに配置する.
   - 個人の開発環境内で変更履歴を管理する場合や,変更履歴を他の人に共有したい場合に利用する.
  - インデックス/ステージングエリア
   - ローカルリポジトリとワーキングツリーの間に位置する部分.
   - 変更したファイルをこの場所に追加することで変更内容を集約し,コミットするための準備を行う.
  - ワーキングツリー
   - 実際にファイルの編集作業を行う場所.
   - コードエディタなどで開くファイルはこの場所に位置する.
 - 以上の場所を行き来することで,リポジトリに「コミット」と呼ばれる変更情報の記録が作成される.

 - 横のつながり編
  - ブランチ
   - 作業履歴を分岐して記録するためのもので,一連のコミットを指す言葉.
   - 他のブランチの影響を受けないため,同時平行で複数の変更を進める事ができる.
   - ブランチとは暗黙的に一連の流れにある最新コミットを指す.
  - コミット
   - git commitコマンドで作成される変更情報の記録のこと.
   - コミットは親コミットと呼ばれる前回のコミットにつながる形でブランチの最新情報を更新する.
   - コミットにはインデックスで集約された変更点の他,親コミットの情報,コミットの作成者,コミットメッセージなどの情報を含む.
  - HEAD
   - 自分が作業しているブランチの最新コミットを指す言葉.
   - もしも最後にコミットした後にワーキングツリーで作業を進めているのであれば,それはワーキングツリーがHEADよりも進んでいる状態と言える.

- おすすめコマンド
 - 縦のつながり編
  - git clone [リモートリポジトリのURL]
   - リモートリポジトリ全体をローカルに複製するコマンド.
  - git fetch
   - リモートリポジトリも最新状態を,ローカルリポジトリの「リモート追跡ブランチ」にダウンロードするためのコマンド.
    - リモート追跡ブランチ:他のリポジトリのブランチを追跡するブランチのことで,ローカルリポジトリ内に存在する.
  - git pull origin[リモートブランチ名]
   - リモートリポジトリの最新状態をローカルブランチに反映するためのコマンド.
   - git pullはgit fetchとgit mergeが組み合わさってできている.
  - git add[ファイル名]
   - 変更したファイルをインデックスに追加するためのコマンド.
  - git commit -m "[コミットメッセージ]"
   - ローカルリポジトリにコミットを作成するためのコマンド.
  - git push origin [リモートブランチ名]
   - ローカルリポジトリに作成したコミットをリモートリポジトリにアップロードするコマンド.
 - 縦のつながり番外編
  - git diff
   - インデックスに追加していない,ワーキングツリーでの変更箇所を確認するためのコマンド.
   - ワーキングツリーをインデックスと比較する.
   - git add前に変更箇所を確認したい場合におすすめ
  - git diff --cached
   - インデックスに追加済みで,次のコミットに入る予定の変更箇所を確認するためのコマンド.
  - git status
   - 前回のコミットから変更のあるパスを表示するコマンド.
 - 横のつながり編
  - git branch
   - ローカルブランチを確認するコマンド.
  - git branch -a
   - ローカルリポジトリ内にある全てのブランチを確認できる.
  - git checkout[移動先のブランチ名]
   - 指定したローカルブランチに移動づるためのコマンド.
  - git checkout .
   - ワーキングツリー内の変更をインデックスの状態に戻すためのコマンド.
  - git checkout -b[作成したいブランチ名]
   - ローカルに新しいブランチを作成し,作成したブランチに移動するためのコマンド.
  - git merge
   - 複数のブランチを一つにまとめるためのコマンド.
   - このコマンドを実行するブランチに,指定したブランチの変更が取り込まれる.
   - 二つの取り込み方がある
    - Fast-forwardのマージ
     - 派生元のブランチが,指定したブランチを作成したときと比べて進んでいない場合の統合方法.
    - recursive strategyのマージ
     - 派生元のブランチが,指定したブランチを作成した時よりも進んでいる場合の統合方法.
  - git log
   - コミットの履歴を表示するためのコマンド.
   - 最新のコミット履歴が一番上に表示される.
 - その他のコマンド
  - git stash
   - ワーキングツリーの変更を一時退避するためのコマンド.
- upstream pullreq merge branch
 - upstream
  - 元締めに向かう方向.
  - 自分が元締めの側にいるのか元締めではない側にいるのかで「出ていく」「入ってくる」は変わる.
 - pullreq
  - 開発者のローカルリポジトリでの変更を他の開発者に通知する機能.
  - 次のような機能を提供
   - 機能追加や改修など,作業内容をレビュー・マージ担当者やその他関係者に通知する.
   - ソースコードの変更箇所を分かりやすく表示する.
   - ソースコードに関するコミュニケーションの場を提供する.
 - merge 
  - 何かと何かを「結合する」とか「統合する」とか「合体する」とかの意味.
 - branch
  - 履歴の流れを分岐して記録していくためのもの.
  - 分岐したブランチは他のブランチの影響を受けないため,同じリポジトリ中で複数の変更を同時に進めていく事ができる.
  - 分岐したブランチは他のブランチとマージする事で,一つのブランチにまとめ直す事ができる.
