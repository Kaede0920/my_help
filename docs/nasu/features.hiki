{{toc}}
!featuresでの記述とその意味
featuresでの記述は，コマンドの振る舞いを説明する自然な記述です．
その様子をspecific_helpが用意しているデフォルトのコマンドについて説明します．
specific_helpとは，ユーザが作成するそれぞれのヘルプです．
speific_helpの--helpを表示させると，
<<< tcsh
        --edit                       edit help contentsを開く
        --to_hiki                    hikiのformatに変更する
        --all                        すべてのhelp画面を表示させる
        --store [item]               store [item] でback upをとる
        --remove [item]              remove [item] back upしてるlistを消去する
        --add [item]                 add new [item]で新しいhelpを作る
        --backup_list [val]          back upしているlistを表示させる
>>>
が得られます．
これらの項目について順に詳細な振る舞いとそれを記述するシナリオを検討していきます．

!!--add [item]
このコマンドは新しいitemをspecific_helpに追加します．
提供される機能をシナリオの先頭に内容をかいつまんでこの振る舞いが記述されています．
実装では，ヘルプの内容は~/.my_help/emacs_help.ymlに元dataがあります．

<<< ruby
nasu% cat add.feature
#language: ja

#--add [item]
機能: 新しいitemをspecific_helpに追加する
specific_helpとは，ユーザが作成するそれぞれのヘルプである
新しいhelp画面を追加したい

シナリオ: コマンドを入力してspecific_helpにitemを追加する
        前提 新たなhelpコマンドを追加したい
        もし emacs_help --add[item]を入力する
        ならば ~/.my_help/emacs_help.ymlに新しいitemが自動的に追加される

>>>

!!--all
このコマンドはspecific_helpにあるhelpを一度に全て表示させます．
するとspecific_helpにあるitemを全て表示します．
実装では，元データが~/.my_help/emacs_help.ymlにあるので，それを全て表示します．

<<< ruby
nasu% cat all_help.feature
#language: ja

#--all
機能: 全てのhelp画面を見る
複数のhelp画面を一度に見たい時に便利である

シナリオ: コマンドを入力してすべてのhelpを見る
        前提 複数のhelp画面を表示したい
        もし emacs_help --allと入力する
        ならば すべてのhelp画面が表示される
>>>


!!--backup_list
このコマンドは過去にバックアップをとったことのあるitemを表示させます．
自分がどのitemをバックアップしたのかの確認ができます．
また，そのitemのバックアップをとった時間も表示されるので，いつバックアップをとったのかの確認もできます．
<<< ruby
nasu% cat backup_list.feature
#language: ja

#--backup_list
機能: 過去にバックアップしてあるitemのリストを表示させる
何をバックアップしたかの確認をしたい

シナリオ: コマンドを入力してバックアップのリストを見る
        前提 バックアップのリストを見たい
        もし emacs_help --backup_listを入力する
        ならば バックアップしているitemのリストが表示される
        
>>>


!!--edit
このコマンドはspecific_helpのitemの編集ができます．
実装では，元データのある~/.my_help/emacs_help.ymlがemacsで開かれ，自分で編集ができます．
編集作業が終了したら，emacsで開かれているので， [C-x C-s]で保存，[C-x C-c]でeditを閉じます．
<<< ruby
nasu% cat edit_help.feature
# language: ja
#--edit
機能: helpコマンドの追加や削除，編集をするためのeiditを開く
emacs_helpと入力したときに出てくるhelpのコマンドの追加や削除，編集ができる

シナリオ: コマンドを入力してeditを開く
        前提 emacs_helpのコマンドの編集がしたい
        もし emacs_help --editと入力する
        ならば ~/.my_help/emacs_help.ymlがemacsで開かれる
>>>

!!--remove [item]
このコマンドは新しいitemをspecific_helpから削除します．
提供される機能をシナリオの先頭に内容をかいつまんでこの振る舞いが記述されています．
実装では，ヘルプの内容は~/.my_help/emacs_help.ymlに元dataがあります．
<<< ruby
nasu% cat remove.feature
#language: ja

#--remove [item]
機能: specific_helpのitemを消す
いらなくなったitemを消したいときに使う

シナリオ: コマンドを入力してitemを消す
        前提 いらないitemを消したい
        もし emacs_help remove [item]
        ならば ~/.my_help/emacs_help.ymlからitemが消える

>>>

!!--store [item]
このコマンドはspecific_helpのitemのバックアップをとります．
少しhelpを新しくしたいが，過去のhelpを残しておけば安心できます．
~/.my_helpディレクトリーの中に，同じ名前の先頭に'.'をつけたファイルに追記されていきます．
 -rw-r--r--   1 bob  501   3231  2 10 17:11 my_todo.yml
 -rw-r--r--   1 bob  501  31925  2  3 19:49 .my_todo.yml
などとしてます．
<<< ruby
nasu% cat store.feature
#language: ja

#--store [item]
機能: itemのバックアップを取る
バックアップとして残したいitemがあるときに使う

シナリオ: コマンドを入力してitemのバックアップをとる
        前提 バックアップをとっておきたい
        もし emacs_help --store [item]と入力する
        ならば 入力したitemのバックアップが作られる
>>>

!!--to_hiki
このコマンドはformatをhikiに変更します．

<<< 
:カーソル移動:cursor
*C-f, move Forwrard,    前or右へ
*C-b, move Backwrard,   後or左へ
*C-a, go Ahead of line, 行頭へ
*C-e, go End of line,   行末へ
*C-n, move Next line,   次行へ
*C-p, move Previous line, 前行へ
>>>
などとhiki記法で出力されます．これをhikiの本文中に入れると
:カーソル移動:cursor
*C-f, move Forwrard,    前or右へ
*C-b, move Backwrard,   後or左へ
*C-a, go Ahead of line, 行頭へ
*C-e, go End of line,   行末へ
*C-n, move Next line,   次行へ
*C-p, move Previous line, 前行へ
などとweb上で表示されます．


//使用方法がわからない．--allと変わらない振る舞いをする．

<<< ruby
nasu% cat to_hiki.feature
# language: ja

#--to_hiki
機能:formatをhikiモードに変更する
一つ一つエディタで開いて変更するのがめんどくさい時に有益である

シナリオ: コマンドを入力してformatをhikiモードに変える
        前提 hikiモードに変更したい
        もし emacs_help --to_hikiと入力する
        ならば formatがhikiモードに変更される
>>>

!!todoの更新
まず，todoを書き込むために，editを開くために，my_todo --editと入力します．
--editコマンドは上記で説明した動きをします．
しかし，ここでは元データは~/.my_help/todo_help.ymlです．
editが開かれたら，todoを書き込みます．（今週やることならweeklyというitemを作ってそこに書き込む）
保存方法や，editの閉じ方はemacsと同じ操作方法です．
<<< ruby
nasu% my_todo.feature
# language: ja

機能: todoの更新を行う
自分のするべきことを書き込むためにtodoを更新する

シナリオ: コマンドを入力してtodoを更新していく
          前提 todoを編集したい
          もし "my_todo --edit"と入力する
          ならば editが開かれる
          かつ 自分のtodoを書き込む

>>>
