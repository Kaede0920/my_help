#+STARTUP: indent nolineimages
#+OPTIONS: ^:{}

* 概要
  :PROPERTIES:
  :CUSTOM_ID: 概要
  :END:

CUI(CLA)ヘルプのUsage出力を真似て，user独自のhelpを作成・提供するgem.

* (my_helpで解決しようとする)問題点
  :PROPERTIES:
  :CUSTOM_ID: my_helpで解決しようとする問題点
  :END:

CUIやshell, 何かのプログラミング言語などを習得しようとする初心者は，
commandや文法を覚えるのに苦労します．少しのkey(とっかかり)があると
思い出すんですが，うろ覚えでは間違えて路頭に迷います．問題点は， 
+ manは基本的に英語 
+ manualでは重たい 
+ いつもおなじことをwebで検索して 
+ 同じとこ見ている 
+ memoしても，どこへ置いたか忘れる
などです．

* 特徴
  :PROPERTIES:
  :CUSTOM_ID: 特徴
  :END:

これらをCLA環境として提供しようというのが，このgemの目的です．
仕様としては， 
- userが自分にあったmanを作成 
- 雛形を提供 
- おなじformat, looks, 操作, 階層構造 
- すぐに手が届く 
- それらを追加・修正・削除できる

memoソフトでは，検索が必要となりますが，my_helpは
key(記憶のとっかかり)を提供することが目的です．
RPGでレベル上げとかアイテムを貯めるようにして，
プログラミングでスキルを発展させてください．

物覚えの悪い作者は，人の名前をitem分けして，こそっと使っています．

* 使用法
  :PROPERTIES:
  :CUSTOM_ID: 使用法
  :END:
** インストール

: $ gem install my_help
です． installがうまくいくと，defaultでmy_help, my_todo, emacs_help, org_helpが入ります．

** 簡単な使用法
   :PROPERTIES:
   :CUSTOM_ID: 簡単な使用法
   :END:

emacs_helpを動かしてみてください．


#+BEGIN_EXAMPLE
- emacsのキーバインド
- 
特殊キー操作
-   C-f, controlキーを押しながら    'f'
-   M-f, escキーを押した後一度離して'f'
-     操作の中断C-g, 操作の取り消し(Undo) C-x u
-      cc by Shigeto R. Nishitani, 2016
Usage: emacs_help [options]
    -v, --version                    show program Version.
    -c, --cursor                     cursor
    -e                               edit
    -s, --short_cut                  short_cut
    -f, --file                       file
        --quit                       quit
    -p, --page                       page
    -w, --window                     window
    -b, --buffer                     buffer
    -m, --mode                       mode
    -q, --query_replace              query_replace
    -r, --ruby-mode                  ruby-mode
    -d, --dired                      dired
        --edit                       edit help contents
        --all                        display all helps
        --store [item]               store [item] in backfile
        --remove [item]              remove [item] and store in backfile
        --add [item]                 add new [item]
        --backup_list [val]          show last [val] backup list
#+END_EXAMPLE

#+BEGIN_EXAMPLE
    Usage: my_help [options]
        -v, --version                    show program Version.
        -l, --list                       個別(specific)ヘルプのList表示.
        -e, --edit NAME                  NAME(例：test_help)をEdit編集.
        -i, --init NAME                  NAME(例：test_help)のtemplateを作成.
        -m, --make                       make executables for all helps.
        -c, --clean                      clean up exe dir.
            --install_local              install local after edit helps
            --delete NAME                delete NAME help
#+END_EXAMPLE

です．まず，-lでdefaultで入っているリストを見てください．
--addとか--editとかで，要素の追加や編集ができます．

** alpine linuxのためのDockerfile
   :PROPERTIES:
   :CUSTOM_ID: alpine-linuxのためのdockerfile
   :END:

my_helpをalpine
linux上で動作させるため、以下のDockerfileを作成しました。

#+BEGIN_EXAMPLE
    FROM alpine:3.7

    ENV http_proxy <YOUR PROXY HERE>
    ENV https_proxy <YOUR PROXY HERE>

    RUN apk update && apk upgrade
    RUN apk --update add \
      openssh git build-base libffi libffi-dev \
      ruby ruby-dev ruby-rake ruby-bundler

    RUN git clone https://github.com/daddygongon/my_help.git
    WORKDIR my_help

    RUN bundle update
    RUN bundle exec exe/my_help -m && rake install:local
#+END_EXAMPLE

プロキシは適宜書き換えてください。
ビルド時のアカウントに関するエラーを除けば大体は問題なく動作しています。

#+BEGIN_SRC sh
    # build an image named 'my-help'
    $ docker build -t my-help .
    ...

    # run a container
    $ docker run -it --rm my-help:latest emacs_help
#+END_SRC

** 独自のhelpを作る方法
   :PROPERTIES:
   :CUSTOM_ID: 独自のhelpを作る方法
   :END:

さて，独自のhelpを作る方法です．まずは，

: my_help -i new_help

で，new_helpというtemplateが用意されます．-e
new_helpで編集してください． emacs org形式で，格納されています．サンプルが，

にあります．このあと，-mすると自動でnew_helpがexeディレクトリーに追加されます．

* userの独自helpの達成方法
  :PROPERTIES:
  :CUSTOM_ID: userの独自helpの達成方法
  :END:

exe中のファイルをrakeで自動生成． @target_dirにそれらのdataを保存．
その名前からexe中に実行ファイルを自動生成させている．

#+BEGIN_EXAMPLE
    lib/daddygongon/
    └── emacs_help

    exe
    ├── e_h
    └── emacs_help
#+END_EXAMPLE

ということ．これは，

: my_help -m
で実行される．

たくさんの実行ファイルをgemのINSTALLATION DIRに置くことになるので，あらたなmy_helpを作成するときには

: gem uninstall my_help

でそのdirをcleanにしておくことが望ましい．下のuninstallの項目を参照．

* uninstall
  :PROPERTIES:
  :CUSTOM_ID: uninstall
  :END:

my_help -mでinstallするとEXECUTABLE DIRECTORYにhelpのexec
filesが自動で追加される． ~/.my_helpを手で修正したときには，あらかじめ

: unistall my_help

でそれらをuninstallしておくと良い．

#+BEGIN_QUOTE
  $ gem uninstall my_help

Select gem to uninstall: 
1. my_help-0.1.0 
2. my_help-0.2.0 
3. my_help-0.2.1 
4. my_help-0.2.2 
5. my_help-0.2.3 
6. my_help-0.3.0 
7. my_help-0.3.1 
8. my_help-0.3.2 
9. All versions

> 9 
Successfully uninstalled my_help-0.1.0 Successfully
uninstalled my_help-0.2.0 Remove executables: #my_help#

in addition to the gem? [Yn] Y 
Removing #my_help# Successfully
uninstalled my_help-0.2.1 Successfully uninstalled my_help-0.2.2
Successfully uninstalled my_help-0.2.3 Successfully uninstalled
my_help-0.3.0 Remove executables: test_help

in addition to the gem? [Yn] Y 
Removing test_help Successfully
uninstalled my_help-0.3.1 Remove executables: e_h, emacs_help, m_h,
member_help, my_help, n_h, new_help, r_h, ruby_help, t_h,
template_help

in addition to the gem? [Yn] Y 
Removing e_h Removing emacs_help
Removing m_h Removing member_help Removing my_help Removing n_h
Removing new_help Removing r_h Removing ruby_help Removing t_h
Removing template_help Successfully uninstalled my_help-0.3.2 ```
#+END_QUOTE

